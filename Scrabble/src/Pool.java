/* Team name: Camel Bois
 * Members:
 * Carlo Motteran 18717341
 * Adam Russell   18328861
 * Karol Wojcik   18322146 */

import java.util.ArrayList;
import java.util.Random;

public class Pool {
	
	/*The idea is that if we want to be able to reset the pool quickly
	 * we need the program to have a reference for what a full pool looks like
	 */
	
	private ArrayList<Tile> fullPool;
	
	public ArrayList<Tile> workPool;
	
	public Pool(){
		fullPool = new ArrayList<Tile>();
		workPool = new ArrayList<Tile>();
		
		int i=0;
		while(i<100) {
			if(i<9) {
				Tile A = new Tile('A',1);
				fullPool.add(A);
			}
			else if(i<11) {
				Tile B = new Tile('B',3);
				fullPool.add(B);
			}
			else if(i<13) {
				Tile C = new Tile('C',3);
				fullPool.add(C);
			}
			else if(i<17) {
				Tile D = new Tile('D',2);
				fullPool.add(D);
			}
			else if(i<29) {
				Tile E = new Tile('E', 1);
				fullPool.add(E);
			}
			else if(i<31) {
				Tile F = new Tile('F',4);
				fullPool.add(F);
			}
			else if(i<34) {
				Tile G = new Tile('G',2);
				fullPool.add(G);
			}
			else if(i<36) {
				Tile H = new Tile('H',4);
				fullPool.add(H);
			}
			else if(i<45) {
				Tile I = new Tile('I',1);
				fullPool.add(I);
			}
			else if(i<46) {
				Tile J = new Tile('J',8);
				fullPool.add(J);
			}
			else if(i<47) {
				Tile K = new Tile('K',5);
				fullPool.add(K);
			}
			else if(i<51) {
				Tile L = new Tile('L',1);
				fullPool.add(L);
			}
			else if(i<53) {
				Tile M = new Tile('M',3);
				fullPool.add(M);
			}
			else if(i<59) {
				Tile N = new Tile('N',1);
				fullPool.add(N);
			}
			else if(i<67) {
				Tile O = new Tile('O',1);
				fullPool.add(O);
			}
			else if(i<69) {
				Tile P = new Tile('P',3);
				fullPool.add(P);
			}
			else if(i<70) {
				Tile Q = new Tile('Q',10);
				fullPool.add(Q);
			}
			else if(i<76) {
				Tile R = new Tile('R',1);
				fullPool.add(R);
			}
			else if(i<80) {
				Tile S = new Tile('S',1);
				fullPool.add(S);
			}
			else if(i<86) {
				Tile T = new Tile('T',1);
				fullPool.add(T);
			}
			else if(i<90) {
				Tile U = new Tile('U',1);
				fullPool.add(U);
			}
			else if(i<92) {
				Tile V = new Tile('V',4);
				fullPool.add(V);
			}
			else if(i<94) {
				Tile W = new Tile('W',4);
				fullPool.add(W);
			}
			else if(i<95) {
				Tile X = new Tile('X',8);
				fullPool.add(X);
			}
			else if(i<97) {
				Tile Y = new Tile('Y',4);
				fullPool.add(Y);
			}
			else if(i<98) {
				Tile Z = new Tile('Z',10);
				fullPool.add(Z);
			}
			else{
				Tile blank = new Tile(' ',0);
				fullPool.add(blank);
			}
			i++;
		}
		this.reset();
	}
	
	/* to reset the working pool we need to make a deep copy of fullPool onto it
	 * so we copy each entry one by one
	 */
	public void reset() {
		workPool.clear();
		
		for(int i=0;i<100;i++) {
			workPool.add(fullPool.get(i));
		}
		
	}
	
	//returns the size of the workPool ArrayList 
	public int poolSize() {
		return workPool.size();
	}
	
	//returns the boolean value of workPool.isEmpty()
	public boolean poolEmpty() {
		return workPool.isEmpty();
	}
	
	/* we make a random object and a temporary Tile
	 * the random number generated by the object is stored in the index int
	 * the tile that will get drawn is saved onto the temporary tile
	 * then it's removed from the workPool and the temporary tile is returned*/
	public Tile draw() {
		Random rnd = new Random();
		int index = rnd.nextInt(workPool.size());
		Tile tmp=workPool.get(index);
		workPool.remove(index);
		return tmp;
	}
}
